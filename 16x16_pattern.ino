#include <TimerOne.h>
#include <avr/pgmspace.h>  // Needed to store stuff in Flash using PROGMEM
#include "FastLED.h"       // Fastled library to control the LEDs
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
// How many leds are connected?
#define NUM_LEDS 64
#define TIMER_US 50000
// Define the Data Pin
#define DATA_PIN 3  // Connected to the data pin of the first LED strip

// Define the array of leds
CRGB leds[NUM_LEDS];
const long tuka[] PROGMEM = {
0xFF0000,	0xFF0000,	0xFF0000,	0xFFF000,	0xFFF000,	0xFF0000,	0xFF0000,	0xFF0000,
0xFF0000,	0xFF0000,	0xFF0000,	0xFFF000,	0xFFF000,	0xFF0000,	0xFF0000,	0xFF0000,
0xFF0000,	0xFF0000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFF0000,	0xFF0000,
0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,
0xFF0000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFF0000,
0xFF0000,	0xFF0000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFF0000,	0xFF0000,
0xFF0000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFFF000,	0xFF0000,
0xFFF000,	0xFFF000,	0xFF0000,	0xFF0000,	0xFF0000,	0xFF0000,	0xFFF000,	0xFFF000,



};
const long vn[] PROGMEM={0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0xFF0000,	0xFF0000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,
0x000000,	0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0xFF0000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,
0xFF0000,	0xFF0000,	0xFF0000,	0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,
0x000000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0xFF0000,	0x000000,	0x000000,	0xFF0000,	0x000000,	0x000000,	0x000000,	0x000000,
};
// Create the array of retro arcade characters and store it in Flash memory
const long DigDug01[] PROGMEM =
{
0x663300,	0x663300,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x663300,	0x663300,	0x000000,
0x000000,	0x000000,	0x330099,	0xFFFF00,	0x330099,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0x000000,	0xCCFFFF,	0xFFFF00,	0xCCFFFF,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0xFF33FF,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF33FF,	0x000000,
0x000000,	0xFFFF00,	0xFF0033,	0xFF0033,	0xFFFF00,	0xFFFF00,	0XFF33FF,	0x000000,
0x000000,	0x000000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0x000000,	0xFFCCCC,	0xFFCCCC,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0x000000,	0xFFCCCC,	0xFFCCCC,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,

};
const long str0[] PROGMEM = {
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,
0x000000,	0x000000,	0x000000,	0x000001,	0x000001,	0x000001,	0x000001,	0x000001,
0x000000,	0x000000,	0x000002,	0x000002,	0x000002,	0x000002,	0x000002,	0x000002,
0x000000,	0x000000,	0x000003,	0x000003,	0x000003,	0x000003,	0x000003,	0x000003,
};


const long DigDug02[] PROGMEM =
{
0x000000,	0x000000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,
0x000000,	0xFFFF00,	0xFFFF00,	0xFF0000, 0xFFFF00,	0xFF0000,	0xFFFF00,	0xFFFF00,
0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF0000,	0xFFFF00,	0xFF0000,	0xFFFF00,	0xFFFF00,
0xFFFF00,	0xFF0000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF0000,
0xFFFF00,	0xFFFF00,	0xFF0000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF0000,	0xFFFF00,
0x000000,	0xFFFF00,	0xFFFF00,	0xFF0000,	0xFF0000,	0xFF0000,	0xFFFF00,	0xFFFF00,
0x000000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,


};

const long Qbert01[] PROGMEM =
{
0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x000000,	0x000000,
0xFFFF00,	0xFFFF00,	0xFFFF00,	0x330066,	0xFFFF00,	0x330066,	0x000000,	0x000000,
0xFFFF00,	0xFFFF00,	0xFFFF00,	0xCCFFFF,	0xFFFF00,	0xCCFFFF,	0x000000,	0x000000,
0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0x663333,	0x663333,	0x000000,	0x000000,
0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFFCC99,	0xFFCC99,	0xFFCC99,	0x000000,	0x000000,
0xCC0000,	0xCC0000,	0xCC0000,	0xCC0000,	0xCC0000,	0xCC0000,	0x330066,	0x663333,
0x330066,	0xFFFF00,	0xCC0000,	0xCC0000,	0xCC0000,	0xFFFF00,	0x000000,	0x000000,
0x330066,	0xFFFF00,	0xFFFF00,	0xCC0000,	0xFFFF00,	0xFFFF00,	0x000000,	0x000000,

};

const long Qbert02[] PROGMEM =
{
0x000000,	0X339933,	0x000000,	0x000000,	0X000000,	0X00000,	0X00000,	0X00000,
0X339933,	0X339933,	0X339933,	0x000000,	0X00000,	0X00000,	0X00000,	0X00000,
0x333399,	0X339933,	0x333399,	0x000000,	0X00000,	0X00000,	0X339933,	0xFFFF00,
0X339933,	0X339933,	0X339933,	0x000000,	0X00000	,0xFFFF00,	0X339933,	0X339933,
0x333399,	0x333399,	0x333399,	0x000000,	0X339933,	0X339933,	0xFFFF00,	0X339933,
0X339933,	0X339933,	0X339933,	0xFFFF00,	0X339933,	0X339933,	0X339933,	0xFFFF00,
0x000000,	0xFFFF00,	0X339933,	0X339933,	0xFFFF00,	0X339933,	0X339933,	0x000000,
0x000000,	0x000000,	0X339933,	0X339933,	0X339933,	0xFFFF00,	0x000000,	0x000000,


};

const long lion[] PROGMEM =
{
0x000000,	0x000000,	0xFF0000,	0xFF0000,	0xFF0000,	0xFF0000,	0xFF0000,	0x000000,
0x000000,	0xFF0000,	0xCCFFFF,	0xCCFFFF,	0xFFFF00,	0xCCFFFF,	0xCCFFFF,	0xFF0000,
0xFF0000,	0xFF0000,	0xFFFF00,	0x663333,	0x663333,	0x663333,	0xFFFF00,	0xFF0000,
0xFF0000,	0xFF0000,	0xFF0000,	0xFFCC99,	0xFFCC99,	0xFFCC99,	0xFF0000,	0xFF0000,
0x000000,	0xFFFF00,	0xFF0000,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF0000,	0xFF0000,
0x000000,	0xFF9999,	0xFF0000,	0xFF0000,	0xFFFF00,	0xFF0000,	0xFF0000,	0x000000,
0x000000,	0xFF9999,	0xFFFF00,	0xFF0000,	0xFF0000,	0xFF0000,	0xFF9999,	0x000000,
0x000000,	0xFF9999,	0xFFFF00,	0xFFFF00,	0xFF0000,	0xFFFF00,	0xFF9999,	0x000000,

};

const long heartz[] PROGMEM =
{
 0x000,  0x0BF,  0x0BF,  0x000,  0x000,  0x0BF,  0x0BF,  0x000,
0x0BF,  0x0BF,  0xFFFF00,  0xFFFF00, 0xFFFF00,  0xFFFF00,  0x0BF,  0x0BF,
0x0BF,  0xFFFF00,  0x33FF33,  0x33FF33,  0x33FF33, 0x33FF33,  0xFFFF00,  0x0BF,
0xEA0,  0xFFFF00,  0x33FF33,  0x33FF33, 0x33FF33,  0x33FF33,  0xFFFF00,  0x0BF,
0x0BF,  0xFFFF00,  0x33FF33,  0x33FF33,  0x33FF33,  0x33FF33,  0xFFFF00,  0x0BF,
0x000,  0x0BF,  0xFFFF00,  0x33FF33, 0x33FF33,  0xFFFF00,  0x0BF,  0x000,
0x000,  0x000,  0x0BF,  0xFFFF00,  0xFFFF00,  0x0BF,  0x000,  0x000,
0x000,  0x000,  0x000,  0x0BF,  0x0BF,  0x000,  0x000,  0x000,

};
const long cavoi[] PROGMEM ={
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x33CCFF,
0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x000000,	0x33CCFF,
0x333399,	0x333399,	0x6666FF,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0x33CCFF,
0x336699,	0x336699,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0x33CCFF,
0x336699,	0x00FF99,	0x6666FF,	0x33CCFF,	0x33CCFF,	0x33CCFF,	0xFFCCCC,	0x6666FF,
0x336699,	0x336699,	0x6666FF,	0x6666FF,	0x33CCFF,	0xFFCCCC,	0xFFCCCC,	0x6666FF,
0xFFCCCC,	0xFFCCCC,	0xFFCCCC,	0xFFCCCC,	0x33CCFF,	0x66CCFF,	0x66CCFF,	0x000000,
0x000000,	0x000000,	0x000000,	0x000000,	0x33CCFF,	0x66CCFF,	0x000000,	0x000000,
};
const long mai[] PROGMEM ={
0x000000,	0x000000,	0xFFFF00,	0xFFFF00,	0xFF9933,	0xFF9933,	0x000000,	0x000000,
0x000000,	0xFF9933,	0xFFFF00,	0xFF9933,	0xFF9933,	0xFFFF00,	0xFF9933,	0x000000,
0xFF9933,	0xFFFF00,	0xFFFF00,	0xFF9933,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF9933,
0xFF9933,	0xFFFF00,	0xFFFF00,	0xFF9933,	0xFF9933,	0xFFFF00,	0xFFFF00,	0xFF9933,
0xFF9933,	0xFFFF00,	0xFFFF00,	0xFFFF00,	0xFF9933,	0xFF9933,	0xFFFF00,	0xFF9933,
0x000000,	0xFF9933,	0xFF9933,	0xFFFF00,	0xFFFF00,	0xFF9933,	0xFF9933,	0x000000,
0x000000,	0x996666,	0x996633,	0x996666,	0x996666,	0x996633,	0x996666,	0x000000,
0x996666,	0x996633,	0x996666,	0x996666,	0x996666,	0x996666,	0x996633,	0x996666,
};

void setup() { 
FastLED.addLeds<NEOPIXEL,DATA_PIN>(leds, NUM_LEDS);  // Init of the Fastled library
FastLED.setBrightness(15);
pinMode(NUM_LEDS, OUTPUT);
Timer1.initialize(TIMER_US);

}

void loop() { 
  for(int passtime = 0; passtime < 10; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(tuka[i]));  // Read array from Flash
  }

FastLED.show();
delay(500);
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(vn[i]));
}

FastLED.show();
delay(500);


  }

// Put Qbert first frame
for(int passtime = 0; passtime < 8; passtime++) { // Display it 8 times

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Qbert01[i]));  // Read array from Flash
  }

FastLED.show();
delay(500);


// Put Qbert second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(Qbert02[i]));
  }

FastLED.show();
delay(500);

}


// Put DigDug first frame
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(DigDug01[i]));
  }

FastLED.show();
delay(500);


// Put DigDug second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(DigDug02[i]));
  }

FastLED.show();
delay(500);

}


// Put BombJack first frame
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(lion[i]));
  }

FastLED.show();
delay(500);


// Put BombJack second frame
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(heartz[i]));
  }

FastLED.show();
delay(500);
FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(cavoi[i]));
  }

FastLED.show();
delay(1000);
}
for(int passtime = 0; passtime < 8; passtime++) {

FastLED.clear();
for(int i = 0; i < NUM_LEDS; i++) {
    leds[i] = pgm_read_dword(&(mai[i]));
  }

FastLED.show();
delay(500);}}

  




